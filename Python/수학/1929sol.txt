def sosu(num):
    if num == 1:
        return 99
    else:
        for i in range(2, num+1):   
            if i == num:
                return 1
            if num % i == 0:
                return 99

여기서 시간초과가 난 이유는 !!
이 문제는 에라토스테네스의 체 라는 방법을 사용해야 하기 때문에 제한시간이 있다.
for i in range(2, num + 1) <<< 여기서 시간초과 오류가 남

< 에라토스테네스의 체란? >
- 수학에서 소수를 찾는 방법
- 소수를 판별한 범위만큼 배열을 할당한 후 2부터 시작해서 특정 수의 배수들을 모두 지우고, 남아있는 수를 출력

<<< 정답 코드 >>>
def sosu(num):
    if num == 1: return
    else:
        for n in range(2, int(num ** (1/2)) + 1):
            if num % n == 0: return
        return True

< 제곱근까지만 검사하는 이유 >

어떤 수 n이 1과 자신이 아닌 두 수의 곱으로 되어 있다고 생각해봅시다. (즉, 소수가 아님)

n = a*b 이고 n' 은 n 의 제곱근이라고 표현합시다.

여기서 만약,

a >= n' 이면, a*b = n = n'*n' 이므로 b<=n' 가 됩니다.

따라서 n' 까지만 검사를 하면 합성수를 이루는 a, b 중 작은 수(위에서는 b)까지는 충분히 체크할 수 있고, 합성수가 존재하지 않으면 소수라고 할 수 있습니다.

(출처: http://sprexatura.blogspot.com/2016/05/n-n-square-root-of-n.html)



